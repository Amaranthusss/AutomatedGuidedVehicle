'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var CDN_SOURCE = 'https://cdn.plot.ly/plotly-latest.min.js';
var LOCAL_SOURCE = '/notebooks/node_modules/plotly-notebook-js/build/plotly.min.js';

var NotebookPlot = function NotebookPlot(data, layout, cdn) {
    if (!(this instanceof NotebookPlot)) {
        return new NotebookPlot(data, layout);
    }

    this.data = data || [];
    this.layout = layout || {};

    if (cdn) {
        this.scriptSource = CDN_SOURCE;
    } else {
        this.scriptSource = LOCAL_SOURCE;
    }

    return this;
};

NotebookPlot.prototype.restyle = function (update, indices) {

    // Normalize array of indices to be affected.
    if (indices === undefined) {
        indices = this.data.map(function (_, i) {
            return i;
        });
    } else {
        indices = Array.isArray(indices) ? indices : [indices];
    }

    // Apply changes.
    this.data = this.data.map(function (trace, i) {
        if (indices.indexOf(i) !== -1) {
            return _extends({}, trace, update);
        } else {
            return trace;
        }
    });

    return this;
};

NotebookPlot.prototype.addTraces = function (traces, indices) {
    var _this = this;

    if (!traces) {
        throw new Error('addTraces requires at least a trace argument!');
    }

    traces = Array.isArray(traces) ? traces : [traces];

    if (indices === undefined) {
        indices = Array(traces.length).fill(-1);
    }

    indices = Array.isArray(indices) ? indices : [indices];

    var zipped = [];
    if (traces.length !== indices.length) {
        throw new Error('Traces and indices must be the same length!');
    } else {
        for (var i = 0; i < traces.length; i++) {
            zipped.push({ trace: traces[i], index: indices[i] });
        }
    }

    zipped = zipped.sort(function (a, b) {
        return a.index - b.index;
    });

    zipped.forEach(function (trace) {
        _this.data.splice(trace.index, 0, trace.trace);
    });

    return this;
};

NotebookPlot.prototype.deleteTraces = function (indices) {
    var _this2 = this;

    if (!indices) {
        throw new Error('deleteTraces requires an indices argument!');
    }

    indices = Array.isArray(indices) ? indices : [indices];

    indices = indices.map(function (index) {
        if (index < 0) {
            return _this2.data.length + index;
        } else {
            return index;
        }
    }).sort().reverse();

    indices.forEach(function (index) {
        _this2.data.splice(index, 1);
    });

    return this;
};

NotebookPlot.prototype.render = function () {

    var timestamp = new Date().getTime();

    var output = ['<div class=\'plotly-plot\'>', '<div id=\'notebook-plot-' + timestamp + '\'></div>', '<script>', 'function plot(){', 'Plotly.plot(\'notebook-plot-' + timestamp + '\',', JSON.stringify(this.data), ',', JSON.stringify(this.layout), ');', '}', 'if(window.Plotly){', 'plot();', '}else if(!window.require){', 'var head = document.head || document.getElementsByTagName(\'head\')[0];', 'var s = document.createElement(\'script\');', 's.src = \'' + CDN_SOURCE + '\';', 's.type = \'text/javascript\';', 's.async = false;', 's.onreadystatechange = s.onload = plot;', 'head.appendChild(s);', '}else{', 'require([\'' + LOCAL_SOURCE + '\'], function(Plotly){', 'window.Plotly = Plotly;', 'plot();', '});', '}', '</script>', '</div>'].join('');

    return output;
};

module.exports = {
    createPlot: NotebookPlot
};